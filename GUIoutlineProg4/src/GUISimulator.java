
/**
This GUI simulates takeoffs and departures of aircraft at an airport.
 @author Chase Knapp
 */
public class GUISimulator extends javax.swing.JFrame
{

   /**
    Creates new form GUISimulator
    */
   private Simulation sim = new Simulation();
   
   public GUISimulator()
   {
      initComponents();
   }

   /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jDialog1 = new javax.swing.JDialog();
      jLabel1 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      jButton4 = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jScrollPane5 = new javax.swing.JScrollPane();
      outArea = new javax.swing.JTextArea();
      currentTime = new javax.swing.JTextField();
      aTakeOff = new javax.swing.JTextField();
      waitingAc = new javax.swing.JTextField();

      javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
      jDialog1.getContentPane().setLayout(jDialog1Layout);
      jDialog1Layout.setHorizontalGroup(
         jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      jDialog1Layout.setVerticalGroup(
         jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Prog4 Simulator");

      jLabel1.setText("Aircraft Departure Simulation");

      jButton1.setText("Departure");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton1ActionPerformed(evt);
         }
      });

      jButton2.setText("Takeoff");
      jButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton2ActionPerformed(evt);
         }
      });

      jButton3.setText("+1 Time Unit");
      jButton3.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton3ActionPerformed(evt);
         }
      });

      jButton4.setText("Statistics");
      jButton4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton4ActionPerformed(evt);
         }
      });

      jLabel2.setText("Current Time");

      jLabel3.setText("Aircraft to take off");

      jLabel4.setText("Number of Aircraft Waiting");

      outArea.setColumns(20);
      outArea.setRows(5);
      jScrollPane5.setViewportView(outArea);

      currentTime.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            currentTimeActionPerformed(evt);
         }
      });

      aTakeOff.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            aTakeOffActionPerformed(evt);
         }
      });

      waitingAc.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            waitingAcActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane5)
               .addComponent(jLabel1)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(80, 80, 80)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(currentTime)
                     .addComponent(aTakeOff)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel2)
                           .addComponent(jLabel3)
                           .addComponent(jLabel4))
                        .addGap(0, 115, Short.MAX_VALUE))
                     .addComponent(waitingAc))))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(29, 29, 29)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jButton1)
                  .addGap(18, 18, 18)
                  .addComponent(jButton2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jButton3)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jButton4))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel2)
                  .addGap(4, 4, 4)
                  .addComponent(currentTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jLabel3)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(aTakeOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(8, 8, 8)
                  .addComponent(jLabel4)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(waitingAc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents
   /**
   Performs the takeOff method
   @param evt 
   */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      if ( sim.takeOff() )
      {
         currentTime.setText(currentTimeString());
         waitingAc.setText(noWaitString());
         if ( sim.getCurrentAircraft())
            aTakeOff.setText(sim.getNextAircraftString());
         else 
            aTakeOff.setText( null);
         outArea.setText( outArea.getText() + takeOffString() + "\n");
      }
      else 
         outArea.setText( outArea.getText() +
               "No aircraft is taking off @time "+ 
               sim.getCurrentTime() + "." + "\n");
      
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
    Sets the current time to a string;
    @return string of current time
    */
    private String currentTimeString()
    {
       return "" + sim.getCurrentTime();
    }
    /**
    Returns a string for departure message
    @return string
    */
    private String departString()
    {
       return "An aircraft entered the runway "+ "@time " +
             currentTimeString() + ". Number waiting in queue is "
            + noWaitString();
    }
    /**
    Sets the queue size to a string to be used
    @return string of queue size
    */
    private String noWaitString()
    {
      return "" + sim.returnQueueSize();
    }
    /**
    Creates a string to be output during a takeoff operation.
    Includes aircraft string and when it took off. 
    @return string 
    */
    private String takeOffString()
    {
       return sim.getAircraftString() + " took off @time " + 
             sim.getCurrentTime() + ". Number of aircraft waiting is " +
             sim.returnQueueSize();
    }
    /**
    Does the departure method in Simulation
    @param evt 
    */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if ( sim.departure() )
       {
         currentTime.setText(currentTimeString());
         waitingAc.setText( noWaitString());
         aTakeOff.setText(sim.getNextAircraftString());
         outArea.setText(outArea.getText() + departString() + "\n");
       }
       else 
          outArea.setText( outArea.getText()
                + "The line at the runway is full!" + "\n");
    }//GEN-LAST:event_jButton1ActionPerformed

   private void waitingAcActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_waitingAcActionPerformed
   {//GEN-HEADEREND:event_waitingAcActionPerformed

   }//GEN-LAST:event_waitingAcActionPerformed

   private void currentTimeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_currentTimeActionPerformed
   {//GEN-HEADEREND:event_currentTimeActionPerformed

   }//GEN-LAST:event_currentTimeActionPerformed

   private void aTakeOffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aTakeOffActionPerformed
   {//GEN-HEADEREND:event_aTakeOffActionPerformed
      // TODO add your handling code here:
   }//GEN-LAST:event_aTakeOffActionPerformed

   private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
   {//GEN-HEADEREND:event_jButton3ActionPerformed
      sim.noAction(1);
      currentTime.setText(currentTimeString());
   }//GEN-LAST:event_jButton3ActionPerformed
   /**
   Calculates average wait time to be used in statistics. 
   @return float of average wait time 
   */
   private double avgWait()
   {
      double avg;
      if ( sim.getAcWaited() == 0)
         avg = 0;
      else
         avg = (double) sim.getTWaitTime() / sim.getAcWaited();
      return avg;
   }
   /**
   Performs the statistics method
   @param evt 
   */
   private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
   {//GEN-HEADEREND:event_jButton4ActionPerformed
      outArea.setText(outArea.getText() + 
            "The average wait time for aircraft that finished waiting is "
            + avgWait() + "." + "\n");
      outArea.setText(outArea.getText() + "The total wait time is " + 
            sim.getTWaitTime() + "." + "\n");
      outArea.setText(outArea.getText() + "The number of aircraft that took "
            + "off is " + sim.getTookOff() + "." + "\n");
      outArea.setText(outArea.getText() + "The number of aircraft that did "
            + "not have to wait is " + sim.getNoWait() + "." + "\n");
   }//GEN-LAST:event_jButton4ActionPerformed

   /**
    @param args the command line arguments
    */
   public static void main(String args[])
   {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(GUISimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new GUISimulator().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField aTakeOff;
   private javax.swing.JTextField currentTime;
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JDialog jDialog1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JScrollPane jScrollPane5;
   private javax.swing.JTextArea outArea;
   private javax.swing.JTextField waitingAc;
   // End of variables declaration//GEN-END:variables
}
